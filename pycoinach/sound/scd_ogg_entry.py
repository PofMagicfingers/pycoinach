from .scd_entry import ScdEntry
from .scd_ogg_crypt_type import ScdOggCryptType


class ScdOggEntry(ScdEntry):
    xor_table = bytearray([
        0x3A, 0x32, 0x32, 0x32, 0x03, 0x7E, 0x12, 0xF7,
        0xB2, 0xE2, 0xA2, 0x67, 0x32, 0x32, 0x22, 0x32,
        0x32, 0x52, 0x16, 0x1B, 0x3C, 0xA1, 0x54, 0x7B,
        0x1B, 0x97, 0xA6, 0x93, 0x1A, 0x4B, 0xAA, 0xA6,
        0x7A, 0x7B, 0x1B, 0x97, 0xA6, 0xF7, 0x02, 0xBB,
        0xAA, 0xA6, 0xBB, 0xF7, 0x2A, 0x51, 0xBE, 0x03,
        0xF4, 0x2A, 0x51, 0xBE, 0x03, 0xF4, 0x2A, 0x51,
        0xBE, 0x12, 0x06, 0x56, 0x27, 0x32, 0x32, 0x36,
        0x32, 0xB2, 0x1A, 0x3B, 0xBC, 0x91, 0xD4, 0x7B,
        0x58, 0xFC, 0x0B, 0x55, 0x2A, 0x15, 0xBC, 0x40,
        0x92, 0x0B, 0x5B, 0x7C, 0x0A, 0x95, 0x12, 0x35,
        0xB8, 0x63, 0xD2, 0x0B, 0x3B, 0xF0, 0xC7, 0x14,
        0x51, 0x5C, 0x94, 0x86, 0x94, 0x59, 0x5C, 0xFC,
        0x1B, 0x17, 0x3A, 0x3F, 0x6B, 0x37, 0x32, 0x32,
        0x30, 0x32, 0x72, 0x7A, 0x13, 0xB7, 0x26, 0x60,
        0x7A, 0x13, 0xB7, 0x26, 0x50, 0xBA, 0x13, 0xB4,
        0x2A, 0x50, 0xBA, 0x13, 0xB5, 0x2E, 0x40, 0xFA,
        0x13, 0x95, 0xAE, 0x40, 0x38, 0x18, 0x9A, 0x92,
        0xB0, 0x38, 0x00, 0xFA, 0x12, 0xB1, 0x7E, 0x00,
        0xDB, 0x96, 0xA1, 0x7C, 0x08, 0xDB, 0x9A, 0x91,
        0xBC, 0x08, 0xD8, 0x1A, 0x86, 0xE2, 0x70, 0x39,
        0x1F, 0x86, 0xE0, 0x78, 0x7E, 0x03, 0xE7, 0x64,
        0x51, 0x9C, 0x8F, 0x34, 0x6F, 0x4E, 0x41, 0xFC,
        0x0B, 0xD5, 0xAE, 0x41, 0xFC, 0x0B, 0xD5, 0xAE,
        0x41, 0xFC, 0x3B, 0x70, 0x71, 0x64, 0x33, 0x32,
        0x12, 0x32, 0x32, 0x36, 0x70, 0x34, 0x2B, 0x56,
        0x22, 0x70, 0x3A, 0x13, 0xB7, 0x26, 0x60, 0xBA,
        0x1B, 0x94, 0xAA, 0x40, 0x38, 0x00, 0xFA, 0xB2,
        0xE2, 0xA2, 0x67, 0x32, 0x32, 0x12, 0x32, 0xB2,
        0x32, 0x32, 0x32, 0x32, 0x75, 0xA3, 0x26, 0x7B,
        0x83, 0x26, 0xF9, 0x83, 0x2E, 0xFF, 0xE3, 0x16,
        0x7D, 0xC0, 0x1E, 0x63, 0x21, 0x07, 0xE3, 0x01,
    ])

    def __init__(self, file, header, data_offset):
        super().__init__(file, header)
        self._decoded = None
        self.vorbis_header = None

        self.decode(data_offset)

    def get_decoded(self):
        return self._decoded

    def decode(self, data_offset):
        crypt_type_offset = 0x00
        xor_value_offset = 0x02
        seek_table_size_offset = 0x10
        vorbis_header_size_offset = 0x14

        crypt_type = self.file._read_int_16(data_offset + crypt_type_offset)

        if crypt_type != ScdOggCryptType.NONE and crypt_type != ScdOggCryptType.FULL_XOR_USING_TABLE and crypt_type != ScdOggCryptType.VORBIS_HEADER_XOR:
            raise NotImplementedError

        seek_table_size = self.file._read_int_32(data_offset + seek_table_size_offset)
        vorbis_header_size = self.file._read_int_32(data_offset + vorbis_header_size_offset)

        vorbis_header_offset = data_offset + 0x20 + seek_table_size
        sound_data_offset = vorbis_header_offset + vorbis_header_size

        vorbis_header = self.file._input_buffer[vorbis_header_offset:sound_data_offset]
        vorbis_header_length = len(vorbis_header)

        if crypt_type == ScdOggCryptType.VORBIS_HEADER_XOR:
            xor_val = self.file._input_buffer[data_offset + xor_value_offset]
            if xor_val != 0:
                for i in range(vorbis_header_length):
                    vorbis_header[i] ^= xor_val

        self._decoded = vorbis_header[:vorbis_header_length]
        self._decoded += self.file._input_buffer[sound_data_offset:sound_data_offset + self.header.data_size]

        if crypt_type == ScdOggCryptType.FULL_XOR_USING_TABLE:
            self.xor_using_table()

        self.vorbis_header = self._decoded[:vorbis_header_length]

    def xor_using_table(self):
        static_xor = self.header.data_size & 0x7F
        table_offset = self.header.data_size & 0x3F
        for i in range(len(self._decoded)):
            self._decoded[i] = self._decoded[i] ^ ScdOggEntry.xor_table[(table_offset + i) & 0xFF]
            self._decoded[i] = self._decoded[i] ^ static_xor
